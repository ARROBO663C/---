import datetime as dt

FORMAT = '%H:%M:%S'  # Запишите формат полученного времени.
WEIGHT = 75  # Вес.
HEIGHT = 175  # Рост.
K_1 = 0.035  # Коэффициент для подсчета калорий.
K_2 = 0.029  # Коэффициент для подсчета калорий.
STEP_M = 0.65  # Длина шага в метрах.

storage_data = {}  # Словарь для хранения полученных данных.


def check_correct_data(data):
    """Проверка корректности полученного пакета."""
    if len(data) != 2 or None in data:
        return False
    else:
        return True
    # Если длина пакета отлична от 2
    # или один из элементов пакета имеет пустое значение -
    # функция вернет False, иначе - True


def check_correct_time(time):
    """Проверка корректности параметра времени."""
    # Если словарь для хранения не пустой
    # и значение времени, полученное в аргументе,
    if len(storage_data) != 0 and time <= max(storage_data.keys()):
        return False
    else:
        return True
    # меньше или равно самому большому значению ключа в словаре,
    # функция вернет False.
    # Иначе - True


def get_step_day(steps):
    """Получить количество пройденных шагов за этот день."""
    steps_day = 0
    for step in storage_data.values():
        steps_day = steps_day + step
    result = steps_day + steps
    return result
    # Посчитайте все шаги, записанные в словарь storage_data,
    # прибавьте к ним значение из последнего пакета
    # и верните  эту сумму.


def get_distance(steps):
    """Получить дистанцию пройденного пути в км."""
    # Посчитайте дистанцию в километрах,
    # исходя из количества шагов и длины шага.
    dist = (steps * STEP_M) / 1000
    return round(dist, 2)


def get_spent_calories(dist, current_time):
    """Получить значения потраченных калорий."""
    # В уроке «Строки» вы написали формулу расчета калорий.
    # Перенесите её сюда и верните результат расчётов.
    hours = current_time.hour + current_time.minute / 60
    speed = float(dist / hours)
    minutes = hours * 60
    spent_calories = (K_1 * WEIGHT + (speed ** 2 / HEIGHT) * K_2 * WEIGHT) * minutes
    return round(spent_calories, 2)
# Для расчётов вам потребуется значение времени;
    # получите его из объекта current_time;
    # переведите часы и минуты в часы, в значение типа float.



def get_achievement(dist):
    """Получить поздравления за пройденную дистанцию."""
    if dist >= 6.5:
        return f'Отличный результат! Цель достигнута.'
    elif dist >= 3.9 and dist < 6.5:
        return f'Неплохо! День был продуктивный'
    elif dist >= 2 and dist < 3.9:
        return f'Завтра наверстаем'
    else:
        return f'Лежать тоже полезно. Главное — участие, а не победа!'



def show_massage(time, day_steps, dist, spent_cal, achiv):
    return f'''    
Время: {time}.
Количество шагов за сегодня: {day_steps}.
Дистанция составила {dist} км.
Вы сожгли {spent_cal} ккал.
{achiv}
'''
    print(msg)
    print()

#def show_message(current_time, total_steps, dist, spent_calories, achivment):
 #   msg = f"""
#Время: {current_time}.
#Количество шагов за сегодня: {total_steps}.
#Дистанция составила {dist:.2f} км.
#Вы сожгли {spent_calories:.2f} ккал.
#{achivment}"""
#    print(msg)
#    print()

def accept_package(data):
    """Обработать пакет данных."""

    if check_correct_data(data) == False:
        return 'Некорректный пакет'

    # Распакуйте полученные данные.
    pack_time = dt.datetime.strptime(data[0], FORMAT).time()  # Преобразуйте строку с временем в объект типа time.

    if check_correct_time(pack_time) == False:  # Если функция проверки значения времени вернет False
        return 'Некорректное значение времени'
    steps = data[1]

    day_steps = get_step_day(steps)  # Запишите результат подсчёта пройденных шагов.
    dist = get_distance(day_steps)  # Запишите результат расчёта пройденной дистанции.
    spent_calories = get_spent_calories(dist, pack_time)  # Запишите результат расчёта сожжённых калорий.
    achievement = get_achievement(dist)  # Запишите выбранное мотивирующее сообщение.
    print(show_massage(pack_time, day_steps, dist, spent_calories, achievement))
    storage_data[pack_time] = day_steps
    return storage_data  # Добавьте новый элемент в словарь storage_data.
    # Верните словарь storage_data.
# Данные для самопроверки.Не удаляйте их.

package_0 = ('2:00:01', 505)
package_1 = (None, 3211)
package_2 = ('9:36:02', 15000)
package_3 = ('9:36:02', 9000)
package_4 = ('8:01:02', 7600)


accept_package(package_0)
accept_package(package_1)
accept_package(package_2)
accept_package(package_3)
accept_package(package_4)
